{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Cards/Card/Card.js","components/Cards/Cards.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","type","placeholder","onClick","search","Card","showContent","src","image","username","Cards","state","results","this","query","axios","get","then","response","setState","data","items","catch","err","alert","map","key","id","img","avatar_url","login","Component","defaults","baseURL","App","inputVal","searchPemission","inputChangedHandler","event","target","parentElement","firstElementChild","value","console","log","searchResultsHandler","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sWAeeA,G,MAZG,SAACC,GACf,OACI,6BACI,2BACIC,UAAU,SACVC,KAAK,OACLC,YAAY,WAChB,4BAAQC,QAASJ,EAAMK,QAAvB,qBCEGC,G,MATF,SAAAN,GACT,OACI,yBAAKC,UAAU,OAAOG,QAASJ,EAAMO,aACjC,yBAAKC,IAAKR,EAAMS,QAChB,wBAAIR,UAAU,QAAQD,EAAMU,aCyBzBC,G,kNA1BXC,MAAQ,CACJC,QAAS,I,mEAGS,IAAD,OACdC,KAAKd,MAAMe,OACVC,IAAMC,IAAN,0BAA6BH,KAAKd,MAAMe,QACvCG,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACP,QAASM,EAASE,KAAKC,WAEzCC,OAAM,SAAAC,GAAG,OAAIC,MAAM,6B,+BAKxB,IAAIZ,EAAUC,KAAKF,MAAMC,QAAQa,KAAI,SAAAL,GACjC,OAAO,kBAAC,EAAD,CAAMM,IAAKN,EAAKO,GAAIC,IAAKR,EAAKS,WAAYpB,SAAUW,EAAKU,WAEpE,OACA,yBAAK9B,UAAU,SACVY,O,GArBOmB,c,MCEpBhB,IAAMiB,SAASC,QAAU,yB,IA0BVC,E,4MAvBbvB,MAAQ,CACNwB,SAAU,GACVC,iBAAiB,G,EAGnBC,oBAAsB,SAACC,GACrB,EAAKnB,SAAS,CAACgB,SAAUG,EAAMC,OAAOC,cAAcC,kBAAkBC,QACtEC,QAAQC,O,EAEVC,qBAAuB,WACrB,EAAK1B,SAAS,CAACiB,iBAAiB,K,uDAGvB,IAAD,OACR,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,CAAWI,OAAQ,SAAC0C,GAAD,OAAO,EAAKT,oBAAoBS,MACnD,kBAAC,EAAD,CAAOhC,MAAOD,KAAKF,MAAMwB,gB,GAlBfJ,aCGEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.4646971f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./SearchBar.css\"\r\n\r\nconst SearchBar = (props) => {\r\n    return (\r\n        <div>\r\n            <input \r\n                className=\"Search\" \r\n                type=\"text\" \r\n                placeholder=\"Search\"/>\r\n            <button onClick={props.search}>Search Results</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBar","import React from 'react';\r\nimport \"./Card.css\"\r\n\r\nconst Card = props => {\r\n    return (\r\n        <div className=\"Card\" onClick={props.showContent}>\r\n            <img src={props.image}/>\r\n            <h2 className=\"Name\">{props.username}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from \"./Card/Card\"\r\nimport \"./Cards.css\";\r\nimport axios from \"axios\";\r\n\r\nclass Cards extends Component {\r\n    state = {\r\n        results: []\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.props.query) {\r\n            axios.get(`/search/users?q=${this.props.query}`)\r\n            .then(response => {\r\n                this.setState({results: response.data.items})\r\n            })  \r\n            .catch(err => alert('Something went wrong'))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let results = this.state.results.map(data => {\r\n            return <Card key={data.id} img={data.avatar_url} username={data.login}/>\r\n        })\r\n        return (\r\n        <div className=\"Cards\">\r\n            {results}\r\n        </div>   \r\n        )\r\n    }\r\n};\r\n\r\nexport default Cards;","import React, { Component } from 'react';\nimport axios from \"axios\";\n\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport Cards from \"./components/Cards/Cards\"\nimport './App.css';\n\naxios.defaults.baseURL = 'https://api.github.com'\n\nclass App extends Component {\n  state = {\n    inputVal: '',\n    searchPemission: false\n  };\n\n  inputChangedHandler = (event) => {\n    this.setState({inputVal: event.target.parentElement.firstElementChild.value})\n    console.log()\n  }\n  searchResultsHandler = () => {\n    this.setState({searchPemission: true})\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <SearchBar search={(e) => this.inputChangedHandler(e)}/>\n        <Cards query={this.state.inputVal}/>\n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}